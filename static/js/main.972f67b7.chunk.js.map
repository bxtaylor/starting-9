{"version":3,"sources":["player/PlayerSearch.js","player/PlayerCard.js","containers/SelectPlayer.js","team/Team.js","containers/ComparePlayer.js","app/App.js","serviceWorker.js","index.js"],"names":["PlayerSearch","props","onChange","event","newValue","setState","value","renderSuggestion","suggestion","className","name_display_first_last","onSuggestionsFetchRequested","axios","get","params","then","response","row","data","search_player_all","queryResults","results","Array","isArray","suggestions","catch","error","console","log","onSuggestionsClearRequested","getSuggestionValue","setPlayer","state","_","debounce","this","inputProps","placeholder","Component","PlayerCard","player","team_full","position","bats","throws","SelectPlayer","bind","Team","FlexContainer","styled","div","ComparePlayer","active","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.972f67b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Autosuggest from 'react-autosuggest'\n\nclass PlayerSearch extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n    this.onSuggestionsFetchRequested = _.debounce(this.onSuggestionsFetchRequested, 100);\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({ value: newValue })\n  }\n\n  renderSuggestion = suggestion => {\n    return (\n      <div className=\"result\">\n        <div>{suggestion.name_display_first_last}</div>\n      </div>\n    )\n  }\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    axios.get('https://lookup-service-prod.mlb.com/json/named.search_player_all.bam', {\n        params: {\n          'sport_code': \"'mlb'\",\n          'active_sw': \"'Y'\",\n          'name_part': `'${value}%'`\n        }\n      })\n        .then(response => {\n          const row = response.data.search_player_all.queryResults.row;\n          let results = row;\n          if (row) {\n            // Coming from the API, 'row' is an array until there is only one\n            // result, then it turns in single object.\n            if (!Array.isArray(row)) {\n              results = [row];\n            }\n          }\n          else {\n            results = [];\n          }\n          this.setState({suggestions: results});\n        })\n        .catch(error => {\n          console.log(error);\n        })\n        .then();\n  }\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  getSuggestionValue = suggestion => {\n    this.props.setPlayer(suggestion);\n    return suggestion.name_display_first_last;\n  }\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: this.props.placeholder,\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        getSuggestionValue={this.getSuggestionValue}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        renderSuggestion={this.renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default PlayerSearch;","import React, { Component } from 'react';\n\nclass PlayerCard extends Component {  \n  render() {\n    const { player } =this.props;\n    console.log(player)   \n    return(\n      <div>\n        <h2>{player.name_display_first_last}</h2>\n        <div>\n          <strong>Team: </strong> {player.team_full} <br />\n          <strong>Position:</strong> {player.position} <br />\n          <strong>Bats: </strong> {player.bats} <strong>Throws: </strong> {player.throws}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PlayerCard;","import React, { Component } from 'react';\nimport PlayerSearch from '../player/PlayerSearch';\nimport PlayerCard from '../player/PlayerCard';\n\nclass SelectPlayer extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      player: {}\n    }\n    this.setPlayer = this.setPlayer.bind(this);\n  }\n\n  setPlayer(player) {    \n    this.setState({player: player});\n  }\n\n  render() {\n    return(\n      <div>\n        <PlayerSearch setPlayer={this.setPlayer} placeholder=\"Select a player\" />\n        <PlayerCard player={this.state.player}/>\n      </div>\n    )\n  }\n}\n\nexport default SelectPlayer;","import React, { Component } from 'react';\n\nclass Team extends Component {\n  render() {\n    return (\n      <table>\n        <thead>\n          <tr>\n            <td>Player Name</td>\n            <td>Primary Position</td>\n            <td>Batting Avg</td>\n          </tr>\n        </thead>\n      </table>\n    );\n  }\n}\n\nexport default Team;","import React, { Component } from 'react';\nimport SelectPlayer from '../containers/SelectPlayer';\nimport Team from '../team/Team';\nimport styled from 'styled-components';\n\n\nconst FlexContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nclass ComparePlayer extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      active: 'Y',      \n    };   \n  }\n\n  render() {\n    return (\n      <>\n        <h2>Compare Players to Build Your Team.</h2>\n        <FlexContainer>\n          <div>\n            <SelectPlayer />            \n          </div>\n          <div>\n            <SelectPlayer />            \n          </div>\n        </FlexContainer>\n        <Team />\n      </>\n    )\n  }\n}\n\nexport default ComparePlayer;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport ComparePlayer from '../containers/ComparePlayer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>The Starting 9</h1>\n      <BrowserRouter>\n        <>\n          <Switch>\n            <Route path=\"/\" component={ComparePlayer} />            \n          </Switch>\n        </>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}